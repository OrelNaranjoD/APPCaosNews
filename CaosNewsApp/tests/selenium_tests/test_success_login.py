"""
Prueba simplificada de inicio de sesi√≥n con Selenium
"""
import pytest
import time
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from ..test_constants import TEST_USER_CREDENTIALS


class TestSuccessLogin:
    """Prueba RF-2-01 de inicio de sesi√≥n exitoso con Selenium"""

    @pytest.mark.django_db
    def test_success_login(self, live_server_url, create_test_user, create_sample_news, browser):
        """Test simplificado de inicio de sesi√≥n exitoso usando credenciales del caso de uso"""

        # El usuario ya es creado por el fixture create_test_user (para base de test)
        print(f"‚úÖ Usuario de prueba creado: {create_test_user.username}")

        # Las noticias ya son creadas por el fixture create_sample_news
        print(f"‚úÖ Se crearon {len(create_sample_news)} noticias de ejemplo")

        # Para el login usaremos las credenciales del caso de uso
        print(f"‚ÑπÔ∏è Para login usaremos usuario del caso de uso: {TEST_USER_CREDENTIALS['email']}")

        # Usar el browser del fixture (ya configurado)
        driver = browser

        # Navegar a la p√°gina principal
        print(f"Navegando a: {live_server_url.url}")
        driver.get(live_server_url.url)

        # Verificar que la p√°gina carga
        assert "Caos News" in driver.title or "Caos" in driver.title
        print("‚úÖ P√°gina principal cargada correctamente")

        # Buscar el enlace de login
        login_link = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//a[@data-bs-target='#login']"))
        )
        print("üîç Haciendo clic en el enlace de login")
        login_link.click()

        # Esperar que aparezca el modal
        WebDriverWait(driver, 10).until(
            EC.visibility_of_element_located((By.ID, "login"))
        )
        print("üì± Modal de login apareci√≥")

        # Llenar formulario
        print("‚úçÔ∏è Llenando campo de email")
        username_field = driver.find_element(By.ID, "id_identifier")
        username_field.clear()
        username_field.send_keys(TEST_USER_CREDENTIALS['email'])
        time.sleep(1)  # Pausa para visualizaci√≥n

        print("üîí Llenando campo de contrase√±a")
        password_field = driver.find_element(By.ID, "id_password")
        password_field.clear()
        password_field.send_keys(TEST_USER_CREDENTIALS['password'])  # Contrase√±a en texto plano para el formulario
        time.sleep(1)  # Pausa para visualizaci√≥n

        # Enviar formulario
        print("üöÄ Enviando formulario de login")
        submit_button = driver.find_element(By.XPATH, "//input[@type='submit' and @value='Iniciar Sesi√≥n']")
        submit_button.click()
        time.sleep(1)  # Pausa m√°s larga para ver el resultado y las noticias

        # Esperar que el login sea exitoso - verificar m√∫ltiples indicadores
        print("üîç Verificando que el login fue exitoso...")

        # Verificar que el modal se cerr√≥ (se√±al de login exitoso)
        WebDriverWait(driver, 10).until(
            EC.invisibility_of_element_located((By.ID, "login"))
        )
        print("‚úÖ Modal de login se cerr√≥ correctamente")

        # Verificar que aparece enlace de logout (se√±al clara de estar logueado)
        WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//a[contains(@href, '/logout')]"))
        )
        print("‚úÖ Enlace de logout detectado - usuario est√° logueado")

        # Verificar que el enlace de login ya no est√° visible
        login_links = driver.find_elements(By.XPATH, "//a[@data-bs-target='#login']")
        assert len(login_links) == 0, "El enlace de login no deber√≠a estar visible despu√©s de un login exitoso"
        print("‚úÖ Enlace de login ya no visible")

        # Verificar que podemos acceder al √°rea de admin si el usuario tiene permisos
        try:
            driver.get(f"{live_server_url.url}/admin/")
            time.sleep(2)
            if "/admin/" in driver.current_url and "login" not in driver.current_url.lower():
                print("‚úÖ Acceso al √°rea de administraci√≥n confirmado")
            else:
                print("‚ÑπÔ∏è Usuario no tiene acceso al √°rea de administraci√≥n (normal para usuarios regulares)")
        except Exception as e:
            print(f"‚ÑπÔ∏è No se pudo verificar acceso al admin: {e}")

        print("‚úÖ Test de login exitoso completado satisfactoriamente")
